name: Android CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      # Optional env for react-native-config; add more via repository secrets if needed
      APP_NAME: StorefrontApp
      APP_IDENTIFIER: com.storefront.app
      # Backend + Storefront
      FLEETBASE_HOST: ${{ secrets.FLEETBASE_HOST }}
      STOREFRONT_KEY: ${{ secrets.STOREFRONT_KEY }}
      FLEETBASE_KEY: ${{ secrets.FLEETBASE_KEY }}
      # Maps + Payments
      GOOGLE_MAPS_KEY: ${{ secrets.GOOGLE_MAPS_KEY }}
      STRIPE_KEY: ${{ secrets.STRIPE_KEY }}
      # Optional social auth (uncomment if used)
      # FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
      # FACEBOOK_CLIENT_TOKEN: ${{ secrets.FACEBOOK_CLIENT_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: 'yarn'

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile || yarn install

      - name: Create .env from secrets (Release only)
        if: ${{ secrets.FLEETBASE_HOST != '' && github.event_name == 'workflow_dispatch' || secrets.FLEETBASE_HOST != '' && github.ref == 'refs/heads/main' }}
        run: |
          cat > .env << 'EOF'
          APP_NAME=${APP_NAME}
          APP_IDENTIFIER=${APP_IDENTIFIER}
          FLEETBASE_HOST=${FLEETBASE_HOST}
          STOREFRONT_KEY=${STOREFRONT_KEY}
          FLEETBASE_KEY=${FLEETBASE_KEY}
          GOOGLE_MAPS_KEY=${GOOGLE_MAPS_KEY}
          STRIPE_KEY=${STRIPE_KEY}
          EOF

      - name: Create .env with dummy values (fallback)
        if: ${{ secrets.FLEETBASE_HOST == '' }}
        run: |
          echo "No secrets detected, writing dummy .env for test build"
          cat > .env << 'EOF'
          APP_NAME=My Test Storefront
          APP_IDENTIFIER=com.example.storefrontapp
          FLEETBASE_HOST=https://api.example-fleetbase.test
          STOREFRONT_KEY=store_test_1234567890abcdef
          FLEETBASE_KEY=fleetbase_test_sk_abcdefghijklmnopqrstuvwxyz
          GOOGLE_MAPS_KEY=AIzaSyDUMMY-KEY-FOR-DEV-ONLY-1234567890
          STRIPE_KEY=pk_test_51DummyPublishableKey0000000000000000
          EOF

      - name: Show injected env (redacted)
        run: |
          echo "APP_NAME=$APP_NAME"
          echo "APP_IDENTIFIER=$APP_IDENTIFIER"
          echo "FLEETBASE_HOST set? $([ -n "$FLEETBASE_HOST" ] && echo yes || echo no)"
          echo "STOREFRONT_KEY set? $([ -n "$STOREFRONT_KEY" ] && echo yes || echo no)"
          echo "FLEETBASE_KEY set? $([ -n "$FLEETBASE_KEY" ] && echo yes || echo no)"
          echo "GOOGLE_MAPS_KEY set? $([ -n "$GOOGLE_MAPS_KEY" ] && echo yes || echo no)"
          echo "STRIPE_KEY set? $([ -n "$STRIPE_KEY" ] && echo yes || echo no)"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Assemble Debug APK
        working-directory: android
        run: ./gradlew :app:assembleDebug

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: android/app/build/outputs/apk/debug/app-debug.apk

      - name: Decode release keystore
        if: ${{ secrets.ANDROID_KEYSTORE_B64 != '' }}
        run: |
          mkdir -p android/app
          echo "${{ secrets.ANDROID_KEYSTORE_B64 }}" | base64 -d > android/app/release.keystore

      - name: Assemble Release AAB
        if: ${{ secrets.ANDROID_KEYSTORE_B64 != '' }}
        working-directory: android
        env:
          ANDROID_STOREFRONT_APP_UPLOAD_STORE_FILE: ${{ github.workspace }}/android/app/release.keystore
          ANDROID_STOREFRONT_APP_UPLOAD_STORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_STOREFRONT_APP_UPLOAD_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_STOREFRONT_APP_UPLOAD_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          # If .env exists, react-native-config will pick it up during build
          ls -la .env || true
          ./gradlew :app:bundleRelease

      - name: Upload Release AAB
        if: ${{ secrets.ANDROID_KEYSTORE_B64 != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-release.aab
          path: android/app/build/outputs/bundle/release/app-release.aab
